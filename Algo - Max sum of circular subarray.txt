class Solution {
public:
    int kadane(vector<int>A){
        int currMax = 0,maxSum = 0;
        bool neg = true;
        for(int i=0;i<A.size();i++){
            if(A[i] >= 0)
            neg = false;
            currMax += A[i];
            if(currMax < 0)
            currMax = 0;
            maxSum = max(maxSum,currMax);
        }
        if(neg){
            int num = INT_MIN;
            for(int i=0;i<A.size();i++)
            num = max(num,A[i]);
            return num;
        }
        return maxSum;
    }
    int maxSubarraySumCircular(vector<int>& A) {
        int n = A.size();
        int maxKadane = kadane(A);
        int circularSum = 0;
        bool neg = true;
        for(int i=0;i<n;i++){
            if(A[i] >= 0)
            neg = false;
        }
        if(neg){
            int num = INT_MIN;
            for(int i=0;i<A.size();i++)
            num = max(num,A[i]);
            return num;
        }
        for(int i=0;i<n;i++){
            circularSum += A[i];
            A[i] = -A[i];
        }
        circularSum = circularSum + kadane(A);
        return max(circularSum,maxKadane);
    }
};