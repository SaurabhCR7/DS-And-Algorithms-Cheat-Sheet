class solver
{
private:

public:
    void traverseKth(Node* root,int target,int k,vector<int>&ans){
        if(!root or k < 0)
        return;
        if(k == 0){
            ans.push_back(root->data);
            return;
        }
        traverseKth(root->left,target,k-1,ans);
        traverseKth(root->right,target,k-1,ans);
    }
    int printK(Node* root,int target,int k,vector<int>&ans){
        if(!root)
        return -1;
        if(root->data == target){
            traverseKth(root,target,k,ans);
            return 1;
        }
        int leftAns = printK(root->left,target,k,ans);
        int rightAns = printK(root->right,target,k,ans);
        if(leftAns != -1){
            if(leftAns == k)
            ans.push_back(root->data);
            traverseKth(root->right,target,k-leftAns-1,ans);
            return leftAns+1;
        }
        if(rightAns != -1){
            if(rightAns == k)
            ans.push_back(root->data);
            traverseKth(root->left,target,k-rightAns-1,ans);
            return rightAns+1;
        }
        return -1;
    }
    vector <int> KDistanceNodes(Node* root, int target , int k)
    {
        vector<int>ans;
        if(!root)
        return ans;
        printK(root,target,k,ans);
        sort(ans.begin(),ans.end());
        return ans;
    }
};
