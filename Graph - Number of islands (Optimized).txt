void dfs(int i,int j,vector<int>A[],int n,int m){
    A[i][j] = 0;
    if(i>0 and A[i-1][j])
    dfs(i-1,j,A,n,m);
    if(j>0 and A[i][j-1])
    dfs(i,j-1,A,n,m);
    if(i < n-1 and A[i+1][j])
    dfs(i+1,j,A,n,m);
    if(j < m-1 and A[i][j+1])
    dfs(i,j+1,A,n,m);
    if(i>0 and j>0 and A[i-1][j-1])
    dfs(i-1,j-1,A,n,m);
    if(i<n-1 and j<m-1 and A[i+1][j+1])
    dfs(i+1,j+1,A,n,m);
    if(i>0 and j<m-1 and A[i-1][j+1])
    dfs(i-1,j+1,A,n,m);
    if(i<n-1 and j>0 and A[i+1][j-1])
    dfs(i+1,j-1,A,n,m);
}

int findIslands(vector<int> A[], int N, int M) {
    int count = 0;
    for(int i=0;i<N;i++){
        for(int j=0;j<M;j++){
            if(A[i][j] == 1){
                dfs(i,j,A,N,M);
                count++;
            }
        }
    }
    return count;
}
