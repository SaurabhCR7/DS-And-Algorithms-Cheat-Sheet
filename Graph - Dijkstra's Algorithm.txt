#include<bits/stdc++.h>
using namespace std;

class graph{
	public:
	unordered_map<int,list<pair<int,int>>>m;
	void addEdge(int x,int y,int w){
		m[x].push_back(make_pair(y,w));
		m[y].push_back(make_pair(x,w));
	}

	void distance(int src){
		map<int,int>dist;
		for(auto i:m)
		dist[i.first] = INT_MAX;
		dist[src] = 0;
        set<pair<int,int>>s;
		s.insert(make_pair(0,src));
        while(!s.empty()){
            auto temp = *(s.begin());
            int node = temp.second;
            int nodeDist = temp.first;
            s.erase(s.begin());
            for(auto i:m[node]){
                auto dest = i.first;
                if(dist[dest] > nodeDist+i.second){
                    auto it = s.find(make_pair(dist[dest],dest));
                    if(it != s.end())
                    s.erase(it);
                    dist[dest] = nodeDist + i.second;
                    s.insert(make_pair(dist[dest],dest));
                }
            }
        }

		for(auto i:dist){
            if(i.second != 0)
			cout<<i.first<<" : "<<i.second<<endl;
		}
        cout<<endl;
	}

};

int main() {
	int t;
	cin>>t;
	for(int i=0;i<t;i++){
		graph g;
		int n,m;
		cin>>n>>m;
		for(int j=0;j<m;j++){
			int x,y,w;
			cin>>x>>y>>w;
			g.addEdge(x,y,w);
		}
		int s;
		cin>>s;
		g.distance(s);
	}
	return 0;
}