#include <bits/stdc++.h>
using namespace std;

void upheapify(vector<int>&heap,int index){
    if(index == 0)
    return;
    int parentIndex = (index-1)/2;
    if(heap[parentIndex] < heap[index]){
        swap(heap[parentIndex],heap[index]);
        upheapify(heap,parentIndex);
    }
    else
    return;
}

void insert(vector<int>&heap,int x){
    heap.push_back(x);
    upheapify(heap,heap.size()-1);
}
void display(vector<int>heap){
    for(int i=0;i<heap.size();i++)
    cout<<heap[i]<<" , ";
}

void downHeapify(vector<int>&heap,int index){
    int leftChild,rightChild;
    leftChild = 2*index + 1;
    rightChild = 2*index + 2;
    if(leftChild >= heap.size() and rightChild >= heap.size())
    return;
    int largestidx = index;
    if(leftChild < heap.size() and heap[largestidx] < heap[leftChild])
    largestidx = leftChild;
    if(rightChild < heap.size() and heap[largestidx] < heap[rightChild])
    largestidx = rightChild;
    if(largestidx == index)
    return;
    else{
        swap(heap[index],heap[largestidx]);
        downHeapify(heap,largestidx);
    }
}

void deletePeek(vector<int>&heap){
    swap(heap[0],heap[heap.size()-1]);
    heap.pop_back();
    downHeapify(heap,0);
}

void deleteRandom(vector<int>&heap,int index){
    if(index == heap.size()-1){
        heap.pop_back();
        return;
    }
    heap[index] = INT_MAX;          // INT_MIN in case of min heao
    upheapify(heap,index);
    swap(heap[0],heap[heap.size()-1]);
    heap.pop_back();
    downHeapify(heap,0);
}

void downHeapifyHelper(vector<int>&crr,int index,int heap_size){
    int leftIdx = 2*index + 1;
    int rightIdx = 2*index + 2;
    if(leftIdx >= heap_size and rightIdx >= heap_size)
    return;
    int largestIdx = index;
    if(leftIdx < heap_size and crr[leftIdx] > crr[largestIdx])
    largestIdx = leftIdx;
    if(rightIdx < heap_size and crr[rightIdx] > crr[largestIdx])
    largestIdx = rightIdx;
    if(largestIdx == index)
    return;
    else{
        swap(crr[largestIdx],crr[index]);
        downHeapifyHelper(crr,largestIdx,heap_size);
    }
}

void heapSort(vector<int>&crr){
    int heap_size = crr.size();
    while(heap_size > 0){
        swap(crr[0],crr[heap_size-1]);
        heap_size--;
        downHeapifyHelper(crr,0,heap_size);
    }
}

int main() {
    vector<int>heap;
    int n;
    cin>>n;
    for(int i=0;i<n;i++){
        int x;
        cin>>x;
        insert(heap,x);
    }
    display(heap);
    deletePeek(heap);
    cout<<endl;
    deleteRandom(heap,4);
    display(heap);
    cout<<endl;
    // Build Heap from Randomized Array Using Upheapification (Unoptimised)
    vector<int>arr(11);
    arr = {4,25,1,2,5,100,40,20,30,10,7};
    for(int i=0;i<11;i++)
    upheapify(arr,i);
    display(arr);
    cout<<endl;
    // Build Heap from Randomized Array Using DownHeapification (Optimised)
    vector<int>brr(11);
    brr = {4,25,1,2,5,100,40,20,30,10,7};
    for(int i=10;i>=0;i--)
    downHeapify(brr,i);
    display(brr);
    cout<<endl;

    // Heapsort
    vector<int>crr(11);
    crr = {4,25,1,2,5,100,40,20,30,10,7};
    for(int i=10;i>=0;i--)
    downHeapify(crr,i);
    heapSort(crr);
    display(crr);
    return 0;
}
