class Solution {
public:
    string longestPalindrome(string s) {
       int size = s.size();
        int r=0,c=0;
        if(size <= 1)
        return s;
        vector<vector<bool>>dp(size,vector<bool>(size,0));
        int i=0,j=0;            // i indicates starting index and j indicates ending index
        while(i <size and j < size){
            dp[i++][j++] = true;
        }
        i=0,j=1;
        while(i<size and j<size){
            if(s[i] == s[j]){
                r = i;
                c = j;
                dp[i++][j++] = true;
            }
            else
            dp[i++][j++] = false;
        }
        i = 0,j=2;
        int sc;
        while(i != 0 or j < size){
            if(i == 0)
            sc = j;
            if(s[i] == s[j] and dp[i+1][j-1]){
                r = i;
                c = j;
                dp[i++][j++] = true;
            }
            else
            dp[i++][j++] = false;
            if(j >= size){
                i = 0;
                j = sc+1; 
            }
        }
        for(int i=0;i<size;i++){
            for(int j=0;j<size;j++)
            cout<<dp[i][j]<<" ";
            cout<<endl;
        }
        string ans;
        for(int k=r;k<=c;k++)
        ans.push_back(s[k]);
        return ans;
    }
};
