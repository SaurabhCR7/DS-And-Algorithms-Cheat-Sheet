#include<bits/stdc++.h>
using namespace std;

template<typename T>

class Graph{
    map<T,list<T>>adjList;
    public:
    Graph(){

    }
    void addEdge(T u,T v,bool bidir=true){
        adjList[u].push_back(v);
        if(bidir)
        adjList[v].push_back(u);
    }

    void bfs(T src,int n){
        queue<T>q;
        map<T,int>dist;
        q.push(src);
        for(int i=1;i<=n;i++){
            dist[i] = -1;
        }
        dist[src] = 0;
        while(!q.empty()){
            T node = q.front();
            q.pop();
            for(auto neighbour:adjList[node]){
                if(dist[neighbour] == -1){
                    q.push(neighbour);
                    dist[neighbour] = dist[node] + 6;
                }
            }
        }
        for(int i=1;i<=n;i++){
            if(i != src)
            cout<<dist[i]<<" ";
        }
    }
};

int main() {
    int q;
    cin>>q;
    for(int i=0;i<q;i++){
        Graph<int> g;
        int n,m;
        cin>>n>>m;
        for(int j=0;j<m;j++){
            int u,v;
            cin>>u>>v;
            g.addEdge(u,v);
        }
        int x;
        cin>>x;
        g.bfs(x,n);
        cout<<endl;
    }
    return 0;
}