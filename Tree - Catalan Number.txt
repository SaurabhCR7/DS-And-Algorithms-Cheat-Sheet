#include <iostream>
using namespace std;

int dp[1000] = {0};

int catalanUsingRecursion(int n){
    if(n == 0)
    return 1;
    int ans = 0;
    if(dp[n] != 0)
    return dp[n];
    for(int i=1;i<=n;i++)
    ans += catalanUsingRecursion(i-1) * catalanUsingRecursion(n-i);
    dp[n] = ans;
    return ans;
}

int factDP[1000] = {0};

int factorial(int n){
    if(n == 0 || n == 1)
    return 1;
    if(factDP[n] != 0)
    return factDP[n];
    int ans = factorial(n-1) * n;
    factDP[n] = ans;
    return ans;
}

int catalanUsingFormula(int n){
    if(n == 0)
    return 1;
    int a = factorial(2*n);
    int b = factorial(n);
    b = b*b;
    int ans = a/((n+1)*b);
    return ans;
}

int main() {
    for(int i=0;i<=5;i++)
    cout<<catalanUsingRecursion(i)<<" , ";
    cout<<endl;
    for(int i=0;i<=5;i++)
    cout<<catalanUsingFormula(i)<<" , ";
    cout<<endl;
    cout<<"No. of BST that can be formed by using N nodes = "<<catalanUsingFormula(5)<<endl;
    cout<<"No. of Binary Trees that can be formed by using N nodes = "<<catalanUsingFormula(5)*factorial(5)<<endl;
    return 0;
}