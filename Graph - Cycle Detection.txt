// BFS Undirected

bool isCyclic(T src){
        map<T,T>parent;
        map<T,bool>visited;
        queue<T>q;
        q.push(src);
        parent[src] = src;
        visited[src] = true;
        while(!q.empty()){
            T node = q.front();
            q.pop();
            for(auto i:adjList[node]){
                if(visited[i] && parent[node] != i)
                return true;
                else if(!visited[i]){
                    q.push(i);
                    visited[i] = true;
                    parent[i] = node;
                }
            }
        }
}

// DFS Undirected

bool dfs(unordered_map<int,bool>&visited,int par,int src){
    visited[src] = true;
    bool ans = false;
    for(auto i:m[src]){
        if(!visited[i]){
            ans = dfs(visited,src,i);
        }
        else{
            if(i != par)
            return true;
        }
    }
    return ans;
}
bool isCycle(){
    unordered_map<int,bool>visited;
    int s = -1;
    for(auto i:m){
        if(s == -1)
        s = i.first;
        visited[i.first] = false;
    }
    return dfs(visited,-1,s);
}



// DFS Directed

bool dfs(unordered_map<int,bool>&visited,unordered_map<int,bool>&curr,int src){
    visited[src] = true;
    curr[src] = true;
    bool ans = false;
    for(auto i:m[src]){
        if(!visited[i]){
            ans = dfs(visited,curr,i);
        }
        else{
            if(curr[i])
            return true;
        }
    }
    curr[src] = false;
    return ans;
}
bool isCycle(){
    unordered_map<int,bool>visited;
    unordered_map<int,bool>curr;
    int s = -1;
    for(auto i:m){
        if(s == -1)
        s = i.first;
        visited[i.first] = false;
        curr[i.first] = false;
    }
    return dfs(visited,curr,s);
}