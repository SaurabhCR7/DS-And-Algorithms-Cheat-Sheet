// Given an array A of integers, return the number of (contiguous, non-empty) 
// subarrays that have a sum divisible by K.

class Solution {
public:
    int comb(int n){
        return (n*(n-1))/2;
    }
    int subarraysDivByK(vector<int>& A, int K) {
        int sum = 0;
        int size = A.size();
        vector<int>pre(size+1);
        pre[0] = 0;
        unordered_map<int,int>m;
        m[0]++;
        for(int i=0;i<size;i++){
            sum += A[i];
            sum = sum%K;
            sum = (sum+K)%K;
            pre[i+1] = sum%K;
            m[pre[i+1]]++;
        }
        int ans = 0;
        for(auto i:m){
            if(i.second > 1)
            ans += comb(i.second);
        }
        return ans;
    }
};