class FirstUnique {
public:
    unordered_map<int,pair<int,list<int>::iterator>>m;
    list<int>lt;
    FirstUnique(vector<int>& nums) {
        for(int i=0;i<nums.size();i++){
            add(nums[i]);
        }
    }
    
    int showFirstUnique() {
        if(lt.empty())
        return -1;
        int num = lt.front();
        return num;
    }
    
    void add(int value) {
        if(m.find(value) != m.end()){
            if(m[value].first == 1){
                lt.erase(m[value].second);   
                m[value].first = 2;
            }
        }
        else{
            lt.push_back(value);
            pair<int,list<int>::iterator>p;
            p.first = 1;
            p.second = lt.end();
            p.second--;
            m[value] = p;
        }
    }
};